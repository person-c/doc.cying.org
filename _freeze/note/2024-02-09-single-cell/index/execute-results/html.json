{
  "hash": "de640bef2b087f9bac660d98315432b7",
  "result": {
    "markdown": "---\ntitle: \"Single cell tutorial\"\nsubtitle: \"Seurat 教程\"\nformat:\n    html:\n      self-contained: false\n      grid:\n        margin-width: 350px\nexecute:\n  echo: true\ntoc: true\nreference-location: margin\ncitation-location: margin\n---\n\n\n[Seurat object and its methods](https://github.com/satijalab/seurat/wiki/Seurat)\n\n\n[PMBC](https://cf.10xgenomics.com/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Seurat)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: SeuratObject\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sp\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'SeuratObject'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    intersect\n```\n:::\n\n```{.r .cell-code}\nlibrary(data.table)\n```\n:::\n\n\n# common workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the PBMC dataset\npbmc.data <- Read10X(data.dir = \"filtered_gene_bc_matrices/hg19/\")\n# Initialize the Seurat object with the raw (non-normalized data).\npbmc <- CreateSeuratObject(counts = pbmc.data, project = \"pbmc3k\", min.cells = 3, min.features = 200)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Feature names cannot have underscores ('_'), replacing with dashes\n('-')\n```\n:::\n\n```{.r .cell-code}\npbmc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAn object of class Seurat \n13714 features across 2700 samples within 1 assay \nActive assay: RNA (13714 features, 0 variable features)\n 1 layer present: counts\n```\n:::\n\n```{.r .cell-code}\ntibble::glimpse(pbmc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFormal class 'Seurat' [package \"SeuratObject\"] with 13 slots\n  ..@ assays      :List of 1\n  .. ..$ RNA:Formal class 'Assay5' [package \"SeuratObject\"] with 8 slots\n  ..@ meta.data   :'data.frame':\t2700 obs. of  3 variables:\n  .. ..$ orig.ident  : Factor w/ 1 level \"pbmc3k\": 1 1 1 1 1 1 1 1 1 1 ...\n  .. ..$ nCount_RNA  : num [1:2700] 2419 4903 3147 2639 980 ...\n  .. ..$ nFeature_RNA: int [1:2700] 779 1352 1129 960 521 781 782 790 532 550 ...\n  ..@ active.assay: chr \"RNA\"\n  ..@ active.ident: Factor w/ 1 level \"pbmc3k\": 1 1 1 1 1 1 1 1 1 1 ...\n  .. ..- attr(*, \"names\")= chr [1:2700] \"AAACATACAACCAC-1\" \"AAACATTGAGCTAC-1\" \"AAACATTGATCAGC-1\" \"AAACCGTGCTTCCG-1\" ...\n  ..@ graphs      : list()\n  ..@ neighbors   : list()\n  ..@ reductions  : list()\n  ..@ images      : list()\n  ..@ project.name: chr \"pbmc3k\"\n  ..@ misc        : list()\n  ..@ version     :Classes 'package_version', 'numeric_version'  hidden list of 1\n  .. ..$ : int [1:3] 5 0 1\n  ..@ commands    : list()\n  ..@ tools       : list()\n```\n:::\n:::\n\n\n- The number of unique genes detected in each cell.\n\n  - Low-quality cells or empty droplets will often have very few genes\n\n  - Cell doublets or multiplets may exhibit an aberrantly high gene count\n\n- Similarly, the total number of molecules detected within a cell (correlates strongly with unique genes)\n\n- The percentage of reads that map to the mitochondrial genome\n\n  - Low-quality / dying cells often exhibit extensive mitochondrial contamination\n  - We calculate mitochondrial QC metrics with the PercentageFeatureSet() function, which calculates the percentage of counts originating from a set of features\n  - We use the set of all genes starting with MT- as a set of mitochondrial genes\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbmc[[\"percent.mt\"]] <- PercentageFeatureSet(pbmc, pattern = \"^MT-\")\npbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npbmc <- NormalizeData(pbmc)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNormalizing layer: counts\n```\n:::\n\n```{.r .cell-code}\npbmc <- FindVariableFeatures(pbmc, selection.method = \"vst\", nfeatures = 2000)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nFinding variable features for layer counts\n```\n:::\n\n```{.r .cell-code}\nall.genes <- rownames(pbmc)\npbmc <- ScaleData(pbmc, features = all.genes)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCentering and scaling data matrix\n```\n:::\n:::\n\n\nAs in PhenoGraph, we first construct a KNN graph based on the euclidean distance in PCA space, and refine the edge weights between any two cells based on the shared overlap in their local neighborhoods (Jaccard similarity). This step is performed using the FindNeighbors() function, and takes as input the previously defined dimensionality of the dataset (first 10 PCs).\n\nTo cluster the cells, we next apply modularity optimization techniques such as the Louvain algorithm (default) or SLM [SLM, Blondel et al., Journal of Statistical Mechanics], to iteratively group cells together, with the goal of optimizing the standard modularity function. The FindClusters() function implements this procedure, and contains a resolution parameter that sets the ‘granularity’ of the downstream clustering, with increased values leading to a greater number of clusters. We find that setting this parameter between 0.4-1.2 typically returns good results for single-cell datasets of around 3K cells. Optimal resolution often increases for larger datasets. \n\nthese methods aim to preserve local distances in the dataset (i.e. ensuring that cells with very similar gene expression profiles co-localize), but often do not preserve more global relationships. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPC_ 1 \nPositive:  CST3, TYROBP, LST1, AIF1, FTL, FTH1, LYZ, FCN1, S100A9, TYMP \n\t   FCER1G, CFD, LGALS1, S100A8, CTSS, LGALS2, SERPINA1, IFITM3, SPI1, CFP \n\t   PSAP, IFI30, SAT1, COTL1, S100A11, NPC2, GRN, LGALS3, GSTP1, PYCARD \nNegative:  MALAT1, LTB, IL32, IL7R, CD2, B2M, ACAP1, CD27, STK17A, CTSW \n\t   CD247, GIMAP5, AQP3, CCL5, SELL, TRAF3IP3, GZMA, MAL, CST7, ITM2A \n\t   MYC, GIMAP7, HOPX, BEX2, LDLRAP1, GZMK, ETS1, ZAP70, TNFAIP8, RIC3 \nPC_ 2 \nPositive:  CD79A, MS4A1, TCL1A, HLA-DQA1, HLA-DQB1, HLA-DRA, LINC00926, CD79B, HLA-DRB1, CD74 \n\t   HLA-DMA, HLA-DPB1, HLA-DQA2, CD37, HLA-DRB5, HLA-DMB, HLA-DPA1, FCRLA, HVCN1, LTB \n\t   BLNK, P2RX5, IGLL5, IRF8, SWAP70, ARHGAP24, FCGR2B, SMIM14, PPP1R14A, C16orf74 \nNegative:  NKG7, PRF1, CST7, GZMB, GZMA, FGFBP2, CTSW, GNLY, B2M, SPON2 \n\t   CCL4, GZMH, FCGR3A, CCL5, CD247, XCL2, CLIC3, AKR1C3, SRGN, HOPX \n\t   TTC38, APMAP, CTSC, S100A4, IGFBP7, ANXA1, ID2, IL32, XCL1, RHOC \nPC_ 3 \nPositive:  HLA-DQA1, CD79A, CD79B, HLA-DQB1, HLA-DPB1, HLA-DPA1, CD74, MS4A1, HLA-DRB1, HLA-DRA \n\t   HLA-DRB5, HLA-DQA2, TCL1A, LINC00926, HLA-DMB, HLA-DMA, CD37, HVCN1, FCRLA, IRF8 \n\t   PLAC8, BLNK, MALAT1, SMIM14, PLD4, P2RX5, IGLL5, LAT2, SWAP70, FCGR2B \nNegative:  PPBP, PF4, SDPR, SPARC, GNG11, NRGN, GP9, RGS18, TUBB1, CLU \n\t   HIST1H2AC, AP001189.4, ITGA2B, CD9, TMEM40, PTCRA, CA2, ACRBP, MMD, TREML1 \n\t   NGFRAP1, F13A1, SEPT5, RUFY1, TSC22D1, MPP1, CMTM5, RP11-367G6.3, MYL9, GP1BA \nPC_ 4 \nPositive:  HLA-DQA1, CD79B, CD79A, MS4A1, HLA-DQB1, CD74, HIST1H2AC, HLA-DPB1, PF4, SDPR \n\t   TCL1A, HLA-DRB1, HLA-DPA1, HLA-DQA2, PPBP, HLA-DRA, LINC00926, GNG11, SPARC, HLA-DRB5 \n\t   GP9, AP001189.4, CA2, PTCRA, CD9, NRGN, RGS18, CLU, TUBB1, GZMB \nNegative:  VIM, IL7R, S100A6, IL32, S100A8, S100A4, GIMAP7, S100A10, S100A9, MAL \n\t   AQP3, CD2, CD14, FYB, LGALS2, GIMAP4, ANXA1, CD27, FCN1, RBP7 \n\t   LYZ, S100A11, GIMAP5, MS4A6A, S100A12, FOLR3, TRABD2A, AIF1, IL8, IFI6 \nPC_ 5 \nPositive:  GZMB, NKG7, S100A8, FGFBP2, GNLY, CCL4, CST7, PRF1, GZMA, SPON2 \n\t   GZMH, S100A9, LGALS2, CCL3, CTSW, XCL2, CD14, CLIC3, S100A12, RBP7 \n\t   CCL5, MS4A6A, GSTP1, FOLR3, IGFBP7, TYROBP, TTC38, AKR1C3, XCL1, HOPX \nNegative:  LTB, IL7R, CKB, VIM, MS4A7, AQP3, CYTIP, RP11-290F20.3, SIGLEC10, HMOX1 \n\t   LILRB2, PTGES3, MAL, CD27, HN1, CD2, GDI2, CORO1B, ANXA5, TUBA1B \n\t   FAM110A, ATP1A1, TRADD, PPA1, CCDC109B, ABRACL, CTD-2006K23.1, WARS, VMO1, FYB \n```\n:::\n\n```{.r .cell-code}\nElbowPlot(pbmc)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\npbmc <- FindNeighbors(pbmc, dims = 1:10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nComputing nearest neighbor graph\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nComputing SNN\n```\n:::\n\n```{.r .cell-code}\npbmc <- FindClusters(pbmc, resolution = 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 2638\nNumber of edges: 95927\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8728\nNumber of communities: 9\nElapsed time: 0 seconds\n```\n:::\n\n```{.r .cell-code}\n# Look at cluster IDs of the first 5 cells\nhead(Idents(pbmc), 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 AAACCGTGCTTCCG-1 \n               2                3                2                1 \nAAACCGTGTATGCG-1 \n               6 \nLevels: 0 1 2 3 4 5 6 7 8\n```\n:::\n\n```{.r .cell-code}\npbmc <- RunUMAP(pbmc, dims = 1:10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric\nTo use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'\nThis message will be shown once per session\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n16:50:43 UMAP embedding parameters a = 0.9922 b = 1.112\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n16:50:43 Read 2638 rows and found 10 numeric columns\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n16:50:43 Using Annoy for neighbor search, n_neighbors = 30\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n16:50:43 Building Annoy index with metric = cosine, n_trees = 50\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n0%   10   20   30   40   50   60   70   80   90   100%\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n[----|----|----|----|----|----|----|----|----|----|\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n**************************************************|\n16:50:43 Writing NN index file to temp file /tmp/RtmpViqgJP/file108d9022afa07f\n16:50:43 Searching Annoy index using 1 thread, search_k = 3000\n16:50:43 Annoy recall = 100%\n16:50:44 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30\n16:50:44 Initializing from normalized Laplacian + noise (using RSpectra)\n16:50:44 Commencing optimization for 500 epochs, with 105140 positive edges\n16:50:47 Optimization finished\n```\n:::\n:::\n\n\n\nident.1 vs ident.2(ident.1 / ident.2)\n\n::: {.cell}\n\n```{.r .cell-code}\n# find all markers of cluster 2\ncluster2.markers <- FindMarkers(pbmc, ident.1 = 2)\nhead(cluster2.markers, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            p_val avg_log2FC pct.1 pct.2    p_val_adj\nIL32 2.892340e-90  1.3070772 0.947 0.465 3.966555e-86\nLTB  1.060121e-86  1.3312674 0.981 0.643 1.453850e-82\nCD3D 8.794641e-71  1.0597620 0.922 0.432 1.206097e-66\nIL7R 3.516098e-68  1.4377848 0.750 0.326 4.821977e-64\nLDHB 1.642480e-67  0.9911924 0.954 0.614 2.252497e-63\n```\n:::\n\n```{.r .cell-code}\n# find all markers distinguishing cluster 5 from clusters 0 and 3\ncluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3))\nhead(cluster5.markers, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      p_val avg_log2FC pct.1 pct.2     p_val_adj\nFCGR3A        8.246578e-205   6.794969 0.975 0.040 1.130936e-200\nIFITM3        1.677613e-195   6.192558 0.975 0.049 2.300678e-191\nCFD           2.401156e-193   6.015172 0.938 0.038 3.292945e-189\nCD68          2.900384e-191   5.530330 0.926 0.035 3.977587e-187\nRP11-290F20.3 2.513244e-186   6.297999 0.840 0.017 3.446663e-182\n```\n:::\n\n```{.r .cell-code}\n# find markers for every cluster compared to all remaining cells, report only the positive\n# ones\npbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE) |> setDT()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCalculating cluster 0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCalculating cluster 1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCalculating cluster 2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCalculating cluster 3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCalculating cluster 4\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCalculating cluster 5\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCalculating cluster 6\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCalculating cluster 7\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCalculating cluster 8\n```\n:::\n\n```{.r .cell-code}\npbmc.markers[order(-avg_log2FC), first(.SD), by = cluster]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   cluster        p_val avg_log2FC pct.1 pct.2    p_val_adj       gene\n    <fctr>        <num>      <num> <num> <num>        <num>     <char>\n1:       8 0.000000e+00  14.358608 0.615     0 0.000000e+00     LY6G6F\n2:       7 4.242759e-55  10.552019 0.094     0 5.818520e-51        SCT\n3:       6 2.627481e-33   9.468857 0.058     0 3.603328e-29       LIM2\n4:       3 3.824593e-25   9.123429 0.047     0 5.245046e-21    FAM177B\n5:       5 3.028858e-55   8.869893 0.105     0 4.153776e-51      LYPD2\n6:       1 1.972702e-14   8.681249 0.027     0 2.705364e-10       FCAR\n7:       0 1.953258e-08   7.152372 0.016     0 2.678697e-04     GTSCR1\n8:       2 1.583685e-09   7.075248 0.017     0 2.171866e-05    HSD11B1\n9:       4 8.650134e-07   7.045884 0.010     0 1.186279e-02 CTB-91J4.1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnew.cluster.ids <- c(\"Naive CD4 T\", \"CD14+ Mono\", \"Memory CD4 T\", \"B\", \"CD8 T\", \"FCGR3A+ Mono\",\n    \"NK\", \"DC\", \"Platelet\")\nnames(new.cluster.ids) <- levels(pbmc)\npbmc <- RenameIdents(pbmc, new.cluster.ids)\nDimPlot(pbmc, reduction = \"umap\", label = TRUE, pt.size = 0.5) + NoLegend()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/annotate-1.png){width=672}\n:::\n:::\n\n\n\n#  sctranform\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sctransform)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'sctransform'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked _by_ '.GlobalEnv':\n\n    pbmc\n```\n:::\n\n```{.r .cell-code}\n# pbmc_data <- Read10X(data.dir = \"/brahms/shared/vignette-data/pbmc3k/filtered_gene_bc_matrices/hg19/\")\npbmc <- #CreateSeuratObject(pbmc_data) |>\n    #PercentageFeatureSet(pattern = \"^MT-\", col.name = \"percent.mt\") |> \n    pbmc |> \n    SCTransform(vars.to.regress = \"percent.mt\") |>\n    RunPCA(reduction.name = 'pca_sct') |>\n    FindNeighbors(dims = 1:30, reduction = 'pca_sct' ) |>\n    RunUMAP(dims = 1:30, reduction = 'pca_sct', reduction.name = 'umap_sct') |>\n    FindClusters(graph.name = 'SCT_snn')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRunning SCTransform on assay: RNA\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRunning SCTransform on layer: counts\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nvst.flavor='v2' set. Using model with fixed slope and excluding poisson genes.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nVariance stabilizing transformation of count matrix of size 12519 by 2638\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nModel formula is y ~ log_umi\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGet Negative Binomial regression parameters per gene\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing 2000 genes, 2638 cells\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFound 60 outliers - those will be ignored in fitting/regularization step\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSecond step: Get residuals using fitted parameters for 12519 genes\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nComputing corrected count matrix for 12519 genes\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCalculating gene attributes\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWall clock passed: Time difference of 13.61669 secs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nDetermine variable features\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRegressing out percent.mt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCentering data matrix\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSet default assay to SCT\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nPC_ 1 \nPositive:  MALAT1, RPS27A, CCL5, RPS6, LTB, RPS3A, RPS27, RPL13A, RPL3, RPS3 \n\t   IL32, NKG7, RPS12, RPL21, RPL13, RPL9, RPS18, RPL23A, RPSA, CD3D \n\t   RPS15A, PTPRCAP, RPL34, B2M, RPLP2, RPL30, CD3E, EEF1A1, IL7R, CTSW \nNegative:  FTL, LYZ, FTH1, CST3, S100A9, TYROBP, S100A8, AIF1, LST1, FCN1 \n\t   LGALS1, FCER1G, LGALS2, S100A4, SAT1, COTL1, CTSS, TYMP, S100A6, IFITM3 \n\t   CFD, HLA-DRA, PSAP, S100A11, GPX1, SERPINA1, GSTP1, OAZ1, CD68, NPC2 \nPC_ 2 \nPositive:  NKG7, CCL5, GZMB, GNLY, GZMA, CST7, PRF1, FGFBP2, CTSW, GZMH \n\t   CCL4, B2M, SPON2, FCGR3A, CLIC3, CD247, HLA-C, HOPX, KLRD1, GZMM \n\t   ACTB, XCL2, AKR1C3, IGFBP7, HLA-A, TTC38, APMAP, SRGN, S1PR5, PRSS23 \nNegative:  HLA-DRA, CD74, CD79A, HLA-DPB1, HLA-DQA1, HLA-DQB1, TCL1A, CD79B, HLA-DRB1, MS4A1 \n\t   HLA-DPA1, RPL13, RPL13A, LINC00926, LTB, RPL18A, RPL32, HLA-DRB5, VPREB3, RPS18 \n\t   RPS27, CD37, RPS2, HLA-DQA2, RPL11, RPS6, RPS12, RPS23, HLA-DMA, RPS5 \nPC_ 3 \nPositive:  S100A8, S100A9, LYZ, FTL, RPS12, JUNB, IL7R, LDHB, CD3D, RPS14 \n\t   RPS6, RPS3, CD3E, RPL13, RPL32, NOSIP, IL32, S100A6, S100A4, TPT1 \n\t   VIM, RPL10, RPL3, RPLP1, FOS, RGCC, RPL34, RPL11, RPS18, RPS15A \nNegative:  CD74, HLA-DRA, CD79A, HLA-DPB1, HLA-DQA1, HLA-DRB1, CD79B, HLA-DPA1, HLA-DQB1, TCL1A \n\t   NKG7, MS4A1, HLA-DRB5, GZMB, GNLY, LINC00926, HLA-DQA2, FGFBP2, VPREB3, PRF1 \n\t   CST7, HLA-DMA, FCER2, CD37, GZMA, BANK1, GZMH, HLA-DMB, HVCN1, CCL5 \nPC_ 4 \nPositive:  S100A8, S100A9, LYZ, LGALS2, CD14, GPX1, GSTP1, NKG7, MS4A6A, FCN1 \n\t   CCL3, S100A12, FOLR3, CEBPD, GNLY, GRN, CSF3R, GZMB, GAPDH, RBP7 \n\t   BLVRB, CCL5, ID1, VCAN, IL8, CST7, ALDH2, FGFBP2, NCF1, ASGR1 \nNegative:  FCGR3A, LST1, FCER1G, AIF1, IFITM3, MS4A7, IFITM2, FTH1, COTL1, RHOC \n\t   RP11-290F20.3, TIMP1, SAT1, HES4, CDKN1C, SERPINA1, CEBPB, CKB, RPS19, LRRC25 \n\t   HMOX1, LILRA3, HCK, SIGLEC10, PILRA, SPI1, ACTB, STXBP2, BID, ABI3 \nPC_ 5 \nPositive:  GNLY, GZMB, FGFBP2, FCGR3A, PRF1, NKG7, TYROBP, FCER1G, LST1, IFITM3 \n\t   AIF1, SPON2, MALAT1, RPS6, FTL, RPL10, RPS19, CCL4, RPS3A, IFITM2 \n\t   RPL13, RPL32, IGFBP7, CTSW, RPL19, CLIC3, RPL11, RPL21, CD247, CD7 \nNegative:  CCL5, GPX1, PPBP, PF4, SDPR, SPARC, GNG11, HIST1H2AC, CD9, TPM4 \n\t   CLU, NRGN, TUBB1, GP9, RGS18, TAGLN2, RUFY1, MPP1, TUBA4A, CA2 \n\t   CTSA, NCOA4, GRAP2, ACTB, PTCRA, TREML1, NGFRAP1, PGRMC1, FERMT3, RGS10 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Key 'PC_' taken, using 'pcasct_' instead\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nComputing nearest neighbor graph\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nComputing SNN\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n16:51:18 UMAP embedding parameters a = 0.9922 b = 1.112\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFound more than one class \"dist\" in cache; using the first, from namespace 'spam'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nAlso defined by 'BiocGenerics'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n16:51:18 Read 2638 rows and found 30 numeric columns\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n16:51:18 Using Annoy for neighbor search, n_neighbors = 30\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFound more than one class \"dist\" in cache; using the first, from namespace 'spam'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nAlso defined by 'BiocGenerics'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n16:51:18 Building Annoy index with metric = cosine, n_trees = 50\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n0%   10   20   30   40   50   60   70   80   90   100%\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n[----|----|----|----|----|----|----|----|----|----|\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n**************************************************|\n16:51:18 Writing NN index file to temp file /tmp/RtmpViqgJP/file108d903a0de247\n16:51:18 Searching Annoy index using 1 thread, search_k = 3000\n16:51:19 Annoy recall = 100%\n16:51:19 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30\n16:51:20 Initializing from normalized Laplacian + noise (using RSpectra)\n16:51:20 Commencing optimization for 500 epochs, with 112052 positive edges\n16:51:24 Optimization finished\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 2638\nNumber of edges: 109099\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8371\nNumber of communities: 12\nElapsed time: 0 seconds\n```\n:::\n\n```{.r .cell-code}\ntibble::glimpse(pbmc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFormal class 'Seurat' [package \"SeuratObject\"] with 13 slots\n  ..@ assays      :List of 2\n  .. ..$ RNA:Formal class 'Assay5' [package \"SeuratObject\"] with 8 slots\n  .. ..$ SCT:Formal class 'SCTAssay' [package \"Seurat\"] with 9 slots\n  ..@ meta.data   :'data.frame':\t2638 obs. of  9 variables:\n  .. ..$ orig.ident     : Factor w/ 1 level \"pbmc3k\": 1 1 1 1 1 1 1 1 1 1 ...\n  .. ..$ nCount_RNA     : num [1:2638] 2419 4903 3147 2639 980 ...\n  .. ..$ nFeature_RNA   : int [1:2638] 779 1352 1129 960 521 781 782 790 532 550 ...\n  .. ..$ percent.mt     : num [1:2638] 3.02 3.79 0.89 1.74 1.22 ...\n  .. ..$ RNA_snn_res.0.5: Factor w/ 9 levels \"0\",\"1\",\"2\",\"3\",..: 3 4 3 2 7 3 5 5 5 6 ...\n  .. ..$ seurat_clusters: Factor w/ 12 levels \"0\",\"1\",\"2\",\"3\",..: 5 4 1 2 6 1 5 5 5 7 ...\n  .. ..$ nCount_SCT     : num [1:2638] 2287 2615 2482 2353 1908 ...\n  .. ..$ nFeature_SCT   : int [1:2638] 769 1134 1111 942 551 767 765 775 523 558 ...\n  .. ..$ SCT_snn_res.0.8: Factor w/ 12 levels \"0\",\"1\",\"2\",\"3\",..: 5 4 1 2 6 1 5 5 5 7 ...\n  ..@ active.assay: chr \"SCT\"\n  ..@ active.ident: Factor w/ 12 levels \"0\",\"1\",\"2\",\"3\",..: 5 4 1 2 6 1 5 5 5 7 ...\n  .. ..- attr(*, \"names\")= chr [1:2638] \"AAACATACAACCAC-1\" \"AAACATTGAGCTAC-1\" \"AAACATTGATCAGC-1\" \"AAACCGTGCTTCCG-1\" ...\n  ..@ graphs      :List of 4\n  .. ..$ RNA_nn :Formal class 'Graph' [package \"SeuratObject\"] with 7 slots\n  .. ..$ RNA_snn:Formal class 'Graph' [package \"SeuratObject\"] with 7 slots\n  .. ..$ SCT_nn :Formal class 'Graph' [package \"SeuratObject\"] with 7 slots\n  .. ..$ SCT_snn:Formal class 'Graph' [package \"SeuratObject\"] with 7 slots\n  ..@ neighbors   : list()\n  ..@ reductions  :List of 4\n  .. ..$ pca     :Formal class 'DimReduc' [package \"SeuratObject\"] with 9 slots\n  .. ..$ umap    :Formal class 'DimReduc' [package \"SeuratObject\"] with 9 slots\n  .. ..$ pca_sct :Formal class 'DimReduc' [package \"SeuratObject\"] with 9 slots\n  .. ..$ umap_sct:Formal class 'DimReduc' [package \"SeuratObject\"] with 9 slots\n  ..@ images      : list()\n  ..@ project.name: chr \"pbmc3k\"\n  ..@ misc        : list()\n  ..@ version     :Classes 'package_version', 'numeric_version'  hidden list of 1\n  .. ..$ : int [1:3] 5 0 1\n  ..@ commands    :List of 11\n  .. ..$ NormalizeData.RNA        :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n  .. ..$ FindVariableFeatures.RNA :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n  .. ..$ ScaleData.RNA            :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n  .. ..$ RunPCA.RNA               :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n  .. ..$ FindNeighbors.RNA.pca    :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n  .. ..$ RunUMAP.RNA.pca          :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n  .. ..$ SCTransform.RNA          :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n  .. ..$ RunPCA.SCT               :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n  .. ..$ FindNeighbors.SCT.pca_sct:Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n  .. ..$ RunUMAP.SCT.pca_sct      :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n  .. ..$ FindClusters             :Formal class 'SeuratCommand' [package \"SeuratObject\"] with 5 slots\n  ..@ tools       : list()\n```\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}